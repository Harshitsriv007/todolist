[{"/Users/harshitsrivastava/Documents/project/todolist/src/index.js":"1","/Users/harshitsrivastava/Documents/project/todolist/src/reportWebVitals.js":"2","/Users/harshitsrivastava/Documents/project/todolist/src/components/index.js":"3","/Users/harshitsrivastava/Documents/project/todolist/src/routerPath/routerpath.js":"4"},{"size":594,"mtime":1656351378190,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1656350962060,"results":"7","hashOfConfig":"6"},{"size":1544,"mtime":1656578601009,"results":"8","hashOfConfig":"6"},{"size":352,"mtime":1656351355196,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"jrakcm",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"/Users/harshitsrivastava/Documents/project/todolist/src/index.js",[],[],[],"/Users/harshitsrivastava/Documents/project/todolist/src/reportWebVitals.js",[],[],"/Users/harshitsrivastava/Documents/project/todolist/src/components/index.js",["23","24"],[],"/Users/harshitsrivastava/Documents/project/todolist/src/routerPath/routerpath.js",[],[],{"ruleId":"25","severity":1,"message":"26","line":14,"column":11,"nodeType":"27","messageId":"28","endLine":14,"endColumn":21},{"ruleId":"29","severity":1,"message":"30","line":35,"column":27,"nodeType":"31","messageId":"32","endLine":35,"endColumn":29},"no-unused-vars","'clearState' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]